import logging
import asyncio
import re

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiocryptopay import Networks, AioCryptoPay

from db.database import Database
from app import config as cfg
import app.keyboards as kb


bot = Bot(token=cfg.token)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
db = Database(minconn=1, maxconn=25, dbname=cfg.dbname, user=cfg.user, password=cfg.password)


client = AioCryptoPay(token=cfg.TOKEN_CRYPTO_BOT, network=Networks.MAIN_NET)

API = cfg.API
SOLANA_ADDRESS_REGEX = r'^[1-9A-HJ-NP-Za-km-z]{32,44}$'

logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    add_wallet = State()
    check_sol_wallet = State()
    check_sol_holders = State()


"""–ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É"""
# <<<------------------------------------------------------------------------------------------------>>>
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
async def check_payment(user_id: int):
    payment_status = db.get_payment_status(user_id)  # –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    return payment_status == "paid"  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ

# async def check_user_access(message: Message, database, check_payment_func):
#     user_id = message.from_user.id
#     group_id = cfg.TG_ID
#     chat_member = await bot.get_chat_member(group_id, user_id)
#     if not await check_payment_func(user_id) or not database.is_payment_valid(user_id):
#         await message.answer("Payment üí∏ expired or missing ‚è≥. Please use the /pay command to renew. <b>30-days</b> subscription", parse_mode='HTML')
#         return False
#     if chat_member.status not in ["member", "administrator", "creator"]:
#         await message.answer("‚ö†Ô∏è To use the bot, you need to be a member of our group. Please subscribe:"
#             f" <a href='https://t.me/{group_id[1:]}'>{group_id}</a>", parse_mode='HTML')
#         return
#     return True


@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    db.update_payment_status(user_id, "paid")
    fabu_img_path = 'img/fabu.png'
    fabu_img = FSInputFile(fabu_img_path)

    # if not await check_user_access(message, db, check_payment):
    #     return

    await message.answer_photo(
        photo=fabu_img,
        caption="ü§ñ Hello there! üëã"
                "\n\nI‚Äôm your AI assistant, ready to help you dive into the üíº depths of influencers‚Äô wallets I‚Äôve learned about. üïµÔ∏è‚Äç‚ôÇÔ∏è Let‚Äôs explore what treasures they hold... üíé"
                "\n\nBut... ü§î I don‚Äôt know everyone just yet. Over time, I‚Äôll keep expanding my knowledge base! üöÄ  "
                "\n\nüåü So, what do you say? Shall we begin?"
                f"\n\n<a href='{cfg.ref_tgc}'>Channel</a> | <a href='{cfg.ref_tgchat}'>Chat</a> | <a href='{cfg.ref_sup}'>Support</a>",
        reply_markup=kb.greeting,
        parse_mode='HTML'
    )

@dp.message(Command("pay"))
async def pay_command(message: Message):
    invoice = await client.create_invoice(asset='USDT', amount=0.05)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="Payment Link", url=invoice.bot_invoice_url))
    builder.add(InlineKeyboardButton(text="Check Payment", callback_data=f"CHECK|{invoice.invoice_id}"))
    builder.adjust(1)
    await message.answer("üé© To access my abilities, you‚Äôll need to pay üí∏. Let‚Äôs keep this between us üòâ, okay?\n"
                         "Then press <i>Check Payment</i> to check the transaction status", reply_markup=builder.as_markup(), parse_mode='HTML')

@dp.callback_query(lambda c: c.data.startswith("CHECK|"))
async def check_invoice(call: CallbackQuery):
    invoice_id = int(call.data.split("|")[1])
    invoice = await client.get_invoices(invoice_ids=invoice_id)

    if invoice.status == "paid":
        user_id = call.from_user.id
        db.update_payment_status(user_id, "paid")  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await call.message.delete()
        await call.message.answer("üéâ Order paid! Now you‚Äôve got <b>30 days</b> ‚è≥ to use my abilities. Use them wisely üïµÔ∏è‚Äç‚ôÇÔ∏è.", parse_mode='HTML')
    else:
        await call.answer("ü§î I don‚Äôt see the payment üí∏ ... Is there something you're hiding? ü§®")
# <<<------------------------------------------------------------------------------------------------>>>


"""–ë–ª–æ–∫ –º–µ–Ω—é"""
# <<<------------------------------------------------------------------------------------------------>>>
"""–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é"""
"""–ù–∏–∂–µ - —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ—Å—Ç–æ"""

async def menu(message_or_callback):
    # if not await check_user_access(message_or_callback, db, check_payment):
    #     return
    user_id = message_or_callback.from_user.id
    db.update_payment_status(user_id, "paid")
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer("ü§ñ What would you like to explore next? Your turn, thinker üß†... The choice is yours! ‚ú®", reply_markup=kb.menu)
    elif isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.answer("ü§ñ What would you like to explore next? Your turn, thinker üß†... The choice is yours! ‚ú® ", reply_markup=kb.menu)

@dp.callback_query(F.data == "start")
async def process_menu(callback_query: CallbackQuery):
    await menu(callback_query)

@dp.message(Command('menu'))
async def cmd_menu(message: Message):
    await menu(message)
# <<<------------------------------------------------------------------------------------------------>>>


"""–ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
# <<<------------------------------------------------------------------------------------------------>>>
def generate_notify_keyboard(status):
    button_text = "üü¢ On" if status else "üî¥ Off"
    button_callback = "toggle_notify"
    button = InlineKeyboardButton(text=button_text, callback_data=button_callback)
    button_menu = InlineKeyboardButton(text="Menu", callback_data='start')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button], [button_menu]])
    return keyboard

@dp.callback_query(F.data == "spy")
async def process_spy(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    notify_status = db.get_notify_status(user_id)
    keyboard = generate_notify_keyboard(notify_status)
    await callback_query.message.answer("ü§ñ Ah, keeping track of the influencers‚Äô moves, are we? üòè Just enable this feature, and I‚Äôll notify you whenever I spot a token catching the attention of influencers! üöÄüëÄ Always here to keep you informed.", reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query(lambda c: c.data == "toggle_notify")
async def toggle_notify(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    current_status = db.get_notify_status(user_id)
    new_status = not current_status
    db.update_notify_status(user_id, new_status)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = generate_notify_keyboard(new_status)
    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard
    )

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")

async def background_task():
    while True:
        tokens = db.get_tokens_with_more_than_5_unique_wallets()
        print(tokens)
        for token in tokens:
            print(db.is_token_notified(token))
            count = 0
            if not db.is_token_notified(token):
                wallets = db.get_unique_wallets_for_token(token)
                print(wallets)
                message = f"üîî The token <a href='https://dexscreener.com/solana/{token}'>{token}</a> is being actively bought!\nHere's the list:\n\n"
                for wallet in wallets:
                    result = db.get_data(wallet)
                    if result is not None:
                        pnl, wr = result
                        pnl_emoji = "üü¢" if float(pnl.strip('%')) > 0 else "üî¥"
                        wr_emoji = "üü¢" if float(wr.strip('%')) > 50 else "üî¥"
                        infl, link = db.get_influencer(wallet)
                        count += 1
                        print(count)

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
                        message += (
                            f"{pnl_emoji} PNL: {pnl}, {wr_emoji} WR(7d): {wr}, <b><a href='{link}'>{infl}</a></b>\n"
                            f"<code>{wallet}</code>\n\n"
                        )
                    else:
                        continue

                db.add_notified_token(token)
                if count > 2:
                    print('–∑–∞—Ö–æ–∂—É –≤ –Ω–æ—Ç–∏—Ñ–∞–π —é–∑–µ—Ä—Å')
                    await notify_users(message)
                else:
                    continue

        await asyncio.sleep(60)
# <<<------------------------------------------------------------------------------------------------>>>


"""–ë–ª–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
# <<<------------------------------------------------------------------------------------------------>>>
async def notify_users(message):
    users_with_notifications = db.get_users_with_notifications()
    print(users_with_notifications)

    for user_id in users_with_notifications:
        try:
            await bot.send_message(user_id, message, parse_mode='HTML', disable_web_page_preview=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
# <<<------------------------------------------------------------------------------------------------>>>


"""–ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—à–µ–ª—å–∫–æ–≤"""
# <<<------------------------------------------------------------------------------------------------>>>
async def check(message_or_callback, state: FSMContext):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤
    # if not await check_user_access(message_or_callback, db, check_payment):
    #     return

    message_text = "ü§ñ Alright, here‚Äôs how it works:"\
                   "You can input a üí≥ <u><b>wallet</b></u>, and I‚Äôll check if I recognize it and share its üìä stats.\n" \
                   "Or, if you‚Äôd rather provide an ü§µ <u><b>influencer‚Äôs name</b></u>, I‚Äôll show you their üíº wallets and the data I‚Äôve gathered.\n\n" \
                   "The choice is yours ‚Äî let‚Äôs dive in! üöÄ"

    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(message_text, parse_mode='HTML', reply_markup=kb.tips)

    elif isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.answer(message_text, parse_mode='HTML', reply_markup=kb.tips)
    await state.set_state(Form.check_sol_wallet)


@dp.callback_query(F.data == "tip")
async def process_tip(callback_query: CallbackQuery, state: FSMContext):
    message_text = "That's who I know about... Looks around cautiously You know, top secret stuff ü§ê: "

    influencers = db.get_influencers()
    excluded_names = {"smart_degen", "fabu"}
    filtered_influencers = [influencer for influencer in influencers if influencer not in excluded_names]

    if filtered_influencers:
        influencer_list = ", ".join(filtered_influencers)
        message_text += influencer_list
    else:
        message_text += "No one to share this time!"

    await state.set_state(Form.check_sol_wallet)
    await callback_query.message.answer(message_text, parse_mode='HTML')


@dp.callback_query(F.data == "check_sol")
async def process_check_start(callback_query: CallbackQuery, state: FSMContext):
    await check(callback_query, state)

@dp.message(Command('check'))
async def cmd_check(message: Message, state: FSMContext):
    await check(message, state)

"""–ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ SOL –∫–æ—à–µ–ª—å–∫–æ–≤"""
@dp.message(Form.check_sol_wallet)
async def process_check_end(message: Message, state: FSMContext):
    query = message.text

    if query.startswith('/'):
        await state.clear()
        await cmd_holders(message, state)
        return

    if query == 'smart_degen':
        return

    if re.match(SOLANA_ADDRESS_REGEX, message.text):
        result = db.check_row(query)

        if result:
            if len(result) == 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                user, link = result  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            else:
                await message.reply("Sorry, no valid data found for this wallet.")
                return
            count_wallets = db.count_wallets(user)


            await message.reply(f"Yes, I know the owner of this wallet üòè. "
                                f"This is ü§µ <b><a href='{link}'>{user}</a></b>. üïµÔ∏è‚Äç Don't tell anyone! Ô∏è",
                                parse_mode='HTML', disable_web_page_preview=True)
            if count_wallets > 1:
                user_wallets = db.get_user_wallets(user)
                list_wallets = ''
                for user_wallet in user_wallets:
                    wallet_address = user_wallet[0]
                    pnl, wr = db.get_data(wallet_address)

                    if pnl is not None and wr is not None:
                        pnl_emoji = "üü¢" if float(pnl.strip('%')) > 0 else "üî¥"
                        wr_emoji = "üü¢" if float(wr.strip('%')) > 50 else "üî¥"

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
                        list_wallets += (
                            f"{pnl_emoji} PNL: {pnl}, {wr_emoji} WR(7d): {wr}\n"
                            f"<code>{wallet_address}</code>\n\n"
                        )
                    else:
                        list_wallets += f"<code>{wallet_address}</code>\nNo data available for PNL/WR.\n\n"

                await message.answer(
                    f"ü§µ <b><a href='{link}'>{user}</a></b> has üí∞ <b>{count_wallets}</b> wallet(s):\n\n{list_wallets.strip()}",
                    reply_markup=kb.return_menu, parse_mode='HTML', disable_web_page_preview=True
                )

            else:
                await message.answer(f"This is the only wallet of ü§µ <b>{user}</b>.", reply_markup=kb.return_menu,
                                     parse_mode='HTML')

        else:
            await message.reply("Unfortunately üò≠, I don't know anything about this wallet. This one is a mystery!")
    else:
        wallets = db.check_infl(message.text.lower())
        if wallets:
            response = "Yeah ü§î, I remember it now... Here are all of their üíº wallets:\n\n"

            for wallet in wallets:
                wallet_address = wallet[0]
                pnl, wr = db.get_data(wallet_address)

                if pnl is not None and wr is not None:
                    pnl_emoji = "üü¢" if float(pnl.strip('%')) > 0 else "üî¥"
                    wr_emoji = "üü¢" if float(wr.strip('%')) > 50 else "üî¥"

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
                    response += (
                        f"{pnl_emoji} PNL: {pnl}, {wr_emoji} WR(7d): {wr}\n"
                        f"<code>{wallet_address}</code>\n\n"
                    )
                else:
                    response += f"<code>{wallet_address}</code>\nNo data available for PNL/WR.\n\n"

            await message.reply(response.strip(), reply_markup=kb.return_menu, parse_mode='HTML')
        else:
            await message.reply("Unfortunately üò≠, I don't know this user.")


# <<<------------------------------------------------------------------------------------------------>>>


# <<<------------------------------------------------------------------------------------------------>>>
async def holders(message_or_callback, state: FSMContext):
    # if not await check_user_access(message_or_callback, db, check_payment):
    #     return
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer("ü§ñ Here, you can ‚úçÔ∏è enter a <u><b>token address</b></u>, and I‚Äôll üîç help you figure out who is holding it, along with any details I‚Äôve gathered. Let‚Äôs keep it simple and efficient ‚Äî ready when you are! üöÄ", parse_mode='HTML')
    elif isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.answer("ü§ñ Here, you can ‚úçÔ∏è enter a <u><b>token address</b></u>, and I‚Äôll üîç help you figure out who is holding it, along with any details I‚Äôve gathered. Let‚Äôs keep it simple and efficient ‚Äî ready when you are! üöÄ", parse_mode='HTML')
    await state.set_state(Form.check_sol_holders)

@dp.callback_query(F.data == "holders")
async def process_holders_start(callback_query: CallbackQuery, state: FSMContext):
    await holders(callback_query, state)

@dp.message(Command('holders'))
async def cmd_holders(message: Message, state: FSMContext):
    await holders(message, state)


@dp.message(Form.check_sol_holders)
async def process_holders_end(message: Message, state: FSMContext):
    token_address = message.text.strip()

    if token_address.startswith('/check'):
        await state.clear()
        await cmd_check(message, state)
        return

    token_name = db.get_token_name_by_address(token_address)
    wallets = db.get_wallets_by_token(token_address)

    if re.match(SOLANA_ADDRESS_REGEX, message.text):
        if wallets:
            response = f"Here are the ü§µ influencers who own üíµ <b>{token_name}</b>:\n<code>{token_address}</code>:\n\n"
            for wallet, total_in_sol in wallets:
                wallet_info = db.check_row(wallet)
                if isinstance(wallet_info, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è —Å–ª–æ–≤–∞—Ä—å
                    user = wallet_info.get('user', 'Unknown User')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
                    link = wallet_info.get('link', '#')  # –°—Å—ã–ª–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    response += f"Here üí∞ <code>{wallet}</code> holds the token, which is owned by üë® <b><a href='{link}'>{user}</a></b>, and it has tokens worth üí≤ <b>{total_in_sol} SOL</b>\n\n"
                else:
                    response += f"So {wallet}, Balance: {total_in_sol} SOL. Owner information not found.\n\n"
            await message.answer(response, reply_markup=kb.return_menu, parse_mode='HTML', disable_web_page_preview=True)
        else:
            await message.answer(f"Unfortunately üò¢, no one owns this token... yet. But who knows, maybe soon I‚Äôll have more info!")
    else:
        await message.reply("Listen üò†, please enter a valid token address. I'm trying to help here!")
# <<<------------------------------------------------------------------------------------------------>>>




"""–î–õ–Ø –†–ê–ó–†–ê–ë–ê"""
"""–ë–ª–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –∏—Ö –∏–Ω—Ñ–ª–æ–≤ –≤ –±–∞–∑—É"""
# <<<------------------------------------------------------------------------------------------------>>>
"""–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ –±–∞–∑—É"""

@dp.message(Command('etomoyacomanda'))
async def cmd_add_wallet(message: Message, state: FSMContext):
    my_id = cfg.MY_ID
    if int(message.from_user.id) == my_id:
        await state.clear()
        await message.answer(
            "–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª <u><b>–∫–æ—à–µ–ª–µ–∫</b></u>, <u><b>–∏–º—è –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞</b></u> –∏ <u><b>—Å—Å—ã–ª–∫—É</b></u>."
            "\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä: wallet nickname link</b>"
            "\nP.s. –ï—Å–ª–∏ –∏–º—è –∏–Ω—Ñ–ª–∞ –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–±–µ–ª, —Ç–æ –µ–≥–æ –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ <b>[–ø—Ä–æ–±–µ–ª]</b>", parse_mode='HTML')
        await state.set_state(Form.add_wallet)
    else:
        await message.reply('–¢—ã —Å–µ–π—á–∞—Å –ø—Ä–æ —á—Ç–æ? ü§∑‚Äç‚ôÇÔ∏è')


"""–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ –±–∞–∑—É"""
"""–ú–æ–∂–µ—Ç –Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–æ–π —Ç–æ –∫–æ—à –∏–∑–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""

@dp.message(Form.add_wallet)
async def process_add_end(message: Message):
    data = message.text.split(' ')
    data[1] = data[1].replace('[–ø—Ä–æ–±–µ–ª]', ' ').lower()

    if len(data) > 4:
        await message.reply('–°–º. –æ–±—Ä–∞–∑–µ—Ü!')
        return

    if not db.add_row(data[0], data[1], data[2], data[3]):
        await message.reply("–û—à–∏–±–∫–∞!")
        return

    await message.reply("–ó–∞–Ω–µ—Å–µ–Ω–æ!")
# <<<------------------------------------------------------------------------------------------------>>>



async def main():
    db.remove_expired_users()
    asyncio.create_task(background_task())
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Exit")